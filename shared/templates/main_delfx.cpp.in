#include "<%PLUGIN_NAME%>FX.hpp"
#include "userdelfx.h"
#include "fixed_math.h"

static <%PLUGIN_CLASS_NAME%> s_plugin_dsp;

void DELFX_INIT(uint32_t platform, uint32_t api) {
    (void)platform;
    (void)api;
    s_plugin_dsp.reset();
}

void DELFX_PARAM(uint8_t index, int32_t value) {
    float f32_val = q31_to_f32(value);
    switch (index) {
        case k_user_delfx_param_time: s_plugin_dsp.set_speed(f32_val); break;
        case k_user_delfx_param_depth: s_plugin_dsp.set_depth(f32_val); break;
        default: break;
    }
}

void DELFX_PROCESS(const float* main_xn, float* main_yn,
                   const float* sub_xn, float* sub_yn,
                   uint32_t frames) {
    float main_frames_L[frames];
    float main_frames_R[frames];
    float sub_frames_L[frames];
    float sub_frames_R[frames];

    for (uint32_t i = 0; i < frames; ++i) {
        main_frames_L[i] = main_xn[2 * i];
        main_frames_R[i] = main_xn[2 * i + 1];
        sub_frames_L[i] = sub_xn[2 * i];
        sub_frames_R[i] = sub_xn[2 * i + 1];
    }

    s_plugin_dsp.process_main_L(main_frames_L, frames);
    s_plugin_dsp.process_main_R(main_frames_R, frames);
    s_plugin_dsp.process_sub_L(sub_frames_L, frames);
    s_plugin_dsp.process_sub_R(sub_frames_R, frames);

    for (uint32_t i = 0; i < frames; ++i) {
        main_yn[2 * i] = main_frames_L[i];
        main_yn[2 * i + 1] = main_frames_R[i];
        sub_yn[2 * i] = sub_frames_L[i];
        sub_yn[2 * i + 1] = sub_frames_R[i];
    }
}

void DELFX_SUSPEND(void) { }

void DELFX_RESUME(void) { s_plugin_dsp.reset(); }
